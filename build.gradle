plugins {
    id 'fabric-loom' version '1.5-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    mavenCentral()
    maven {
        name = 'Fabric'
        url = 'https://maven.fabricmc.net/'
    }
    maven {
        name = 'Modrinth'
        url = 'https://api.modrinth.com/maven'
    }
    maven {
        name = 'TerraformersMC'
        url = 'https://maven.terraformersmc.com/'
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

loom {
    runs {
        client {
            client()
            setConfigName('Fabric Client')
        }
        server {
            server()
            setConfigName('Fabric Server')
        }
        datagen {
            inherit client
            name 'Fabric Datagen'
            vmArgs '-Dfabric-api.datagen'
            vmArgs "-Dfabric-api.datagen.output-dir=${file('src/main/generated').absolutePath}"
            vmArgs "-Dfabric-api.datagen.modid=${project.mod_id}"
        }
    }
}

sourceSets {
    main {
        resources {
            srcDir 'src/main/generated'
        }
    }
}

processResources {
    inputs.property 'version', project.mod_version
    inputs.property 'minecraft_version', project.minecraft_version
    inputs.property 'loader_version', project.loader_version

    filesMatching('fabric.mod.json') {
        expand([
            'version': project.mod_version,
            'minecraft_version': project.minecraft_version,
            'loader_version': project.loader_version
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.release = 17
}

java {
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jar {
    from('LICENSE') {
        rename { "${it}_${project.archives_base_name}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            name = 'LocalBuilds'
            url = uri("file://${project.rootDir}/build/maven-repo")
        }
    }
}
